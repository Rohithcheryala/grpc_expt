// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: store.proto

package go_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inventory_Add_FullMethodName            = "/store.Inventory/Add"
	Inventory_Remove_FullMethodName         = "/store.Inventory/Remove"
	Inventory_Get_FullMethodName            = "/store.Inventory/Get"
	Inventory_UpdateQuantity_FullMethodName = "/store.Inventory/UpdateQuantity"
	Inventory_UpdatePrice_FullMethodName    = "/store.Inventory/UpdatePrice"
	Inventory_Watch_FullMethodName          = "/store.Inventory/Watch"
)

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClient interface {
	// Add inserts a new Item into the inventory.
	Add(ctx context.Context, in *Item, opts ...grpc.CallOption) (*InventoryChangeResponse, error)
	// Remove removes Items from the inventory.
	Remove(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*InventoryChangeResponse, error)
	// Get retrieves Item information.
	Get(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*Item, error)
	// UpdateQuantity increases or decreases the stock quantity of an Item.
	UpdateQuantity(ctx context.Context, in *QuantityChangeRequest, opts ...grpc.CallOption) (*InventoryUpdateResponse, error)
	// UpdatePrice increases or decreases the price of an Item.
	UpdatePrice(ctx context.Context, in *PriceChangeRequest, opts ...grpc.CallOption) (*InventoryUpdateResponse, error)
	// Watch streams Item updates from the inventory.
	Watch(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Item], error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) Add(ctx context.Context, in *Item, opts ...grpc.CallOption) (*InventoryChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryChangeResponse)
	err := c.cc.Invoke(ctx, Inventory_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Remove(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*InventoryChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryChangeResponse)
	err := c.cc.Invoke(ctx, Inventory_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Get(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*Item, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Item)
	err := c.cc.Invoke(ctx, Inventory_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateQuantity(ctx context.Context, in *QuantityChangeRequest, opts ...grpc.CallOption) (*InventoryUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryUpdateResponse)
	err := c.cc.Invoke(ctx, Inventory_UpdateQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdatePrice(ctx context.Context, in *PriceChangeRequest, opts ...grpc.CallOption) (*InventoryUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryUpdateResponse)
	err := c.cc.Invoke(ctx, Inventory_UpdatePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Watch(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Item], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Inventory_ServiceDesc.Streams[0], Inventory_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ItemIdentifier, Item]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inventory_WatchClient = grpc.ServerStreamingClient[Item]

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility.
type InventoryServer interface {
	// Add inserts a new Item into the inventory.
	Add(context.Context, *Item) (*InventoryChangeResponse, error)
	// Remove removes Items from the inventory.
	Remove(context.Context, *ItemIdentifier) (*InventoryChangeResponse, error)
	// Get retrieves Item information.
	Get(context.Context, *ItemIdentifier) (*Item, error)
	// UpdateQuantity increases or decreases the stock quantity of an Item.
	UpdateQuantity(context.Context, *QuantityChangeRequest) (*InventoryUpdateResponse, error)
	// UpdatePrice increases or decreases the price of an Item.
	UpdatePrice(context.Context, *PriceChangeRequest) (*InventoryUpdateResponse, error)
	// Watch streams Item updates from the inventory.
	Watch(*ItemIdentifier, grpc.ServerStreamingServer[Item]) error
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServer struct{}

func (UnimplementedInventoryServer) Add(context.Context, *Item) (*InventoryChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedInventoryServer) Remove(context.Context, *ItemIdentifier) (*InventoryChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedInventoryServer) Get(context.Context, *ItemIdentifier) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInventoryServer) UpdateQuantity(context.Context, *QuantityChangeRequest) (*InventoryUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuantity not implemented")
}
func (UnimplementedInventoryServer) UpdatePrice(context.Context, *PriceChangeRequest) (*InventoryUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrice not implemented")
}
func (UnimplementedInventoryServer) Watch(*ItemIdentifier, grpc.ServerStreamingServer[Item]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}
func (UnimplementedInventoryServer) testEmbeddedByValue()                   {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s grpc.ServiceRegistrar, srv InventoryServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inventory_ServiceDesc, srv)
}

func _Inventory_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Add(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Remove(ctx, req.(*ItemIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Get(ctx, req.(*ItemIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuantityChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_UpdateQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateQuantity(ctx, req.(*QuantityChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_UpdatePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdatePrice(ctx, req.(*PriceChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ItemIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServer).Watch(m, &grpc.GenericServerStream[ItemIdentifier, Item]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inventory_WatchServer = grpc.ServerStreamingServer[Item]

// Inventory_ServiceDesc is the grpc.ServiceDesc for Inventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Inventory_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Inventory_Remove_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Inventory_Get_Handler,
		},
		{
			MethodName: "UpdateQuantity",
			Handler:    _Inventory_UpdateQuantity_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _Inventory_UpdatePrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Inventory_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store.proto",
}
